# bot/handlers.py
from aiogram import types, Dispatcher, Bot
from sqlalchemy.sql import func
from datetime import datetime
from bot.database import SessionLocal, Word, UserSettings, UserWordStatus
from bot.audio_handlers import get_audio_path
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random

def get_word_message(word_obj):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
      ‚Äì "üéß –ü–æ—Å–ª—É—à–∞—Ç—å —Å–ª–æ–≤–æ" (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ)
      ‚Äì "–ú–µ–Ω—é" (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    """
    text = (
        f"üá™üá™ S√µna: <b>{word_obj.word_et}</b>\n"
        f"üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: <b>{word_obj.translation}</b>\n\n"
        f"üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{word_obj.ai_generated_text}\n"
    )
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üéß –ü–æ—Å–ª—É—à–∞—Ç—å —Å–ª–æ–≤–æ", callback_data=f"play:{word_obj.word_et}"))
    keyboard.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu"))
    return text, keyboard

async def send_five_words(chat_id: str, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤.
    –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å.
    """
    session = SessionLocal()
    sent_word_ids = [uw.word_id for uw in session.query(UserWordStatus).filter_by(chat_id=chat_id).all()]
    query = session.query(Word)
    if sent_word_ids:
        query = query.filter(~Word.id.in_(sent_word_ids))
    words = query.order_by(func.random()).limit(5).all()
    if not words:
        # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        session.query(UserWordStatus).filter_by(chat_id=chat_id).delete()
        session.commit()
        words = session.query(Word).order_by(func.random()).limit(5).all()
    for word in words:
        text, keyboard = get_word_message(word)
        await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard)
        user_word = session.query(UserWordStatus).filter_by(chat_id=chat_id, word_id=word.id).first()
        if not user_word:
            user_word = UserWordStatus(chat_id=chat_id, word_id=word.id, sent_count=1, last_sent=datetime.now())
            session.add(user_word)
        else:
            user_word.sent_count += 1
            user_word.last_sent = datetime.now()
            session.add(user_word)
    session.commit()
    session.close()

# --------------------- Message Handlers ---------------------

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –≤—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start_handler(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Å—Ç–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–∏ A1‚ÄìA2.\n"
        "–í –º–æ–µ–π –±–∞–∑–µ 1781 —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞—é—Ç —ç—Ç–∏ —É—Ä–æ–≤–Ω–∏.\n\n"
        "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "‚Ä¢ /startmailing ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É 5-—Ç–∏ —Å–ª–æ–≤ –≤ —á–∞—Å (—Å 09:00 –ø–æ 23:00)\n"
        "‚Ä¢ /random_word ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ /random_test ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç\n"
        "‚Ä¢ /progress ‚Äì –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤—ã—É—á–µ–Ω–æ X –∏–∑ Y)\n"
        "‚Ä¢ /settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "‚Ä¢ /help ‚Äì –ü–æ–º–æ—â—å\n"
        "‚Ä¢ /get5words ‚Äì –ü–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="startmailing"),
        InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word"),
        InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç", callback_data="random_test"),
        InlineKeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
        InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    )
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /startmailing ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 5 —Å–ª–æ–≤ —Å—Ä–∞–∑—É
async def startmailing_handler(message: types.Message):
    chat_id = str(message.chat.id)
    await send_five_words(chat_id, message.bot)

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É (–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <code>)
async def help_handler(message: types.Message):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äì –ó–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é\n"
        "/random_word ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/random_test ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç\n"
        "/progress ‚Äì –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "<code>/setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;</code> ‚Äì –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setsettings 5 09:00 23:00</code>\n"
        "/get5words ‚Äì –ü–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
        "/help ‚Äì –ü–æ–º–æ—â—å\n\n"
        "–î–ª—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: <a href='https://t.me/seoandrey1'>seoandrey1</a>"
    )
    await message.answer(help_text, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /random_word ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
async def random_word_handler(message: types.Message):
    session = SessionLocal()
    word_obj = session.query(Word).order_by(func.random()).first()
    if not word_obj:
        await message.answer("–ë–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞!", parse_mode="HTML")
        session.close()
        return
    text, keyboard = get_word_message(word_obj)
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    session.close()

# –ö–æ–º–∞–Ω–¥–∞ /random_test ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
async def random_test_handler(message: types.Message):
    session = SessionLocal()
    word = session.query(Word).order_by(func.random()).first()
    if not word:
        await message.answer("–ë–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞!", parse_mode="HTML")
        session.close()
        return
    correct = word.translation
    options = [correct]
    others = session.query(Word).filter(
        Word.part_of_speech == word.part_of_speech,
        Word.id != word.id
    ).order_by(func.random()).limit(3).all()
    for w in others:
        options.append(w.translation)
    random.shuffle(options)
    correct_index = options.index(correct)
    keyboard = InlineKeyboardMarkup(row_width=2)
    for idx, option in enumerate(options):
        button = InlineKeyboardButton(option, callback_data=f"test_answer:{word.id}:{idx}:{correct_index}")
        keyboard.add(button)
    test_text = f"‚ùì –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ <b>{word.word_et}</b>?"
    await message.answer(test_text, parse_mode="HTML", reply_markup=keyboard)
    session.close()

# –ö–æ–º–∞–Ω–¥–∞ /get5words ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 5 —Å–ª–æ–≤ —Å—Ä–∞–∑—É
async def get_five_words_handler(message: types.Message):
    chat_id = str(message.chat.id)
    await send_five_words(chat_id, message.bot)

# –ö–æ–º–∞–Ω–¥–∞ /settings ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
async def settings_handler(message: types.Message):
    chat_id = str(message.chat.id)
    session = SessionLocal()
    user = session.query(UserSettings).filter_by(chat_id=chat_id).first()
    if not user:
        user = UserSettings(chat_id=chat_id)
        session.add(user)
        session.commit()
    text = (
        f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"–°–ª–æ–≤ –≤ —á–∞—Å: <b>{user.words_per_hour}</b>\n"
        f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{user.start_time}</b>\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{user.end_time}</b>\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;</code>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setsettings 5 09:00 23:00</code>"
    )
    await message.answer(text, parse_mode="HTML")
    session.close()

# –ö–æ–º–∞–Ω–¥–∞ /setsettings ‚Äì –∏–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async def set_settings_handler(message: types.Message):
    try:
        args = message.get_args().split()
        words_per_hour = int(args[0])
        start_time = args[1]
        end_time = args[2]
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setsettings <—Å–ª–æ–≤–∞ –≤ —á–∞—Å> <–Ω–∞—á–∞–ª–æ> <–æ–∫–æ–Ω—á–∞–Ω–∏–µ>", parse_mode="HTML")
        return
    chat_id = str(message.chat.id)
    session = SessionLocal()
    user = session.query(UserSettings).filter_by(chat_id=chat_id).first()
    if not user:
        user = UserSettings(chat_id=chat_id)
        session.add(user)
    user.words_per_hour = words_per_hour
    user.start_time = start_time
    user.end_time = end_time
    session.commit()
    session.close()
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /progress ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def progress_handler(message: types.Message):
    chat_id = str(message.chat.id)
    session = SessionLocal()
    total = session.query(Word).count()
    user_sent = session.query(UserWordStatus).filter_by(chat_id=chat_id).count()
    text = f"–ü—Ä–æ–≥—Ä–µ—Å—Å:\n–í—ã—É—á–µ–Ω–æ {user_sent} –∏–∑ {total} —Å–ª–æ–≤."
    await message.answer(text, parse_mode="HTML")
    session.close()

# --------------------- Inline Callback Query Handlers ---------------------

async def help_inline_handler(callback_query: types.CallbackQuery):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äì –ó–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é\n"
        "/random_word ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/random_test ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç\n"
        "/progress ‚Äì –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "<code>/setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;</code> ‚Äì –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setsettings 5 09:00 23:00</code>\n"
        "/get5words ‚Äì –ü–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
        "/help ‚Äì –ü–æ–º–æ—â—å\n\n"
        "–î–ª—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: <a href='https://t.me/seoandrey1'>seoandrey1</a>"
    )
    await callback_query.message.edit_text(help_text, parse_mode="HTML")
    await callback_query.answer()

async def settings_inline_handler(callback_query: types.CallbackQuery):
    settings_text = (
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;</code>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setsettings 5 09:00 23:00</code>"
    )
    await callback_query.message.edit_text(settings_text, parse_mode="HTML")
    await callback_query.answer()

async def menu_inline_handler(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ú–µ–Ω—é¬ª: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Å—Ç–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–∏ A1‚ÄìA2.\n"
        "–í –º–æ–µ–π –±–∞–∑–µ 1781 —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞—é—Ç —ç—Ç–∏ —É—Ä–æ–≤–Ω–∏.\n\n"
        "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "‚Ä¢ /startmailing ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É 5-—Ç–∏ —Å–ª–æ–≤ –≤ —á–∞—Å (—Å 09:00 –ø–æ 23:00)\n"
        "‚Ä¢ /random_word ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ /random_test ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç\n"
        "‚Ä¢ /progress ‚Äì –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤—ã—É—á–µ–Ω–æ X –∏–∑ Y)\n"
        "‚Ä¢ /settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "‚Ä¢ /help ‚Äì –ü–æ–º–æ—â—å\n"
        "‚Ä¢ /get5words ‚Äì –ü–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="startmailing"),
        InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word"),
        InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç", callback_data="random_test"),
        InlineKeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
        InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    )
    await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback_query.answer()

async def inline_button_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    bot = callback_query.bot
    chat_id = str(callback_query.message.chat.id)
    if data == "startmailing":
        await send_five_words(chat_id, bot)
        await callback_query.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    elif data == "random_word":
        session = SessionLocal()
        word_obj = session.query(Word).order_by(func.random()).first()
        if word_obj:
            text, keyboard = get_word_message(word_obj)
            await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard)
        session.close()
        await callback_query.answer("–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ!")
    elif data == "random_test":
        session = SessionLocal()
        word = session.query(Word).order_by(func.random()).first()
        if not word:
            await bot.send_message(chat_id, "–ë–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞!", parse_mode="HTML")
            session.close()
            await callback_query.answer()
            return
        correct = word.translation
        options = [correct]
        others = session.query(Word).filter(
            Word.part_of_speech == word.part_of_speech,
            Word.id != word.id
        ).order_by(func.random()).limit(3).all()
        for w in others:
            options.append(w.translation)
        random.shuffle(options)
        correct_index = options.index(correct)
        keyboard = InlineKeyboardMarkup(row_width=2)
        for idx, option in enumerate(options):
            button = InlineKeyboardButton(option, callback_data=f"test_answer:{word.id}:{idx}:{correct_index}")
            keyboard.add(button)
        test_text = f"‚ùì –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ <b>{word.word_et}</b>?"
        await bot.send_message(chat_id, test_text, parse_mode="HTML", reply_markup=keyboard)
        session.close()
        await callback_query.answer("–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    elif data.startswith("test_answer:"):
        parts = data.split(":")
        if len(parts) != 4:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞.")
            return
        _, word_id, selected_index, correct_index = parts
        if selected_index == correct_index:
            response = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            session = SessionLocal()
            word_obj = session.query(Word).filter_by(id=int(word_id)).first()
            session.close()
            correct_text = word_obj.translation if word_obj else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}"
        await bot.send_message(chat_id, response, parse_mode="HTML")
        await callback_query.answer()
    elif data == "progress":
        session = SessionLocal()
        total = session.query(Word).count()
        user_sent = session.query(UserWordStatus).filter_by(chat_id=chat_id).count()
        text = f"–ü—Ä–æ–≥—Ä–µ—Å—Å:\n–í—ã—É—á–µ–Ω–æ {user_sent} –∏–∑ {total} —Å–ª–æ–≤."
        await bot.send_message(chat_id, text, parse_mode="HTML")
        session.close()
        await callback_query.answer()
    else:
        await callback_query.answer()

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_message_handler(startmailing_handler, commands=["startmailing"])
    dp.register_message_handler(help_handler, commands=["help"])
    dp.register_message_handler(random_word_handler, commands=["random_word"])
    dp.register_message_handler(random_test_handler, commands=["random_test"])
    dp.register_message_handler(get_five_words_handler, commands=["get5words"])
    dp.register_message_handler(settings_handler, commands=["settings"])
    dp.register_message_handler(set_settings_handler, commands=["setsettings"])
    dp.register_message_handler(progress_handler, commands=["progress"])
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ inline‚Äë–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "help", "settings" –∏ "menu"
    dp.register_callback_query_handler(help_inline_handler, lambda c: c.data == "help")
    dp.register_callback_query_handler(settings_inline_handler, lambda c: c.data == "settings")
    dp.register_callback_query_handler(menu_inline_handler, lambda c: c.data == "menu")
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö inline –∫–Ω–æ–ø–æ–∫ (–∏—Å–∫–ª—é—á–∞—è "play:", "help", "settings" –∏ "menu")
    dp.register_callback_query_handler(
        inline_button_handler,
        lambda c: c.data is not None and not c.data.startswith("play:") and c.data not in ["help", "settings", "menu"]
    )
