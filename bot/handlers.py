from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Command
from bot.database import SessionLocal, Word
from bot.tts import get_tts_audio

async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Å—Ç–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")

async def help_handler(message: types.Message):
    help_text = (
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/progress - –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è\n"
        "/say <—Å–ª–æ–≤–æ> - –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞\n"
        "/random_word - –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏"
    )
    await message.answer(help_text)

async def say_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.answer("–£–∫–∞–∂–∏ —Å–ª–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /say auto")
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Å–ª–æ–≤–∞ –≤ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è part_of_speech
    session = SessionLocal()
    word_obj = session.query(Word).filter(Word.word_et == args).first()
    if not word_obj:
        await message.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ!")
        session.close()
        return

    audio_path = get_tts_audio(word_obj.word_et, word_obj.part_of_speech)
    session.close()
    with open(audio_path, 'rb') as audio:
        await message.answer_voice(audio)

# –ü—Ä–∏–º–µ—Ä –¥–ª—è /random_word
async def random_word_handler(message: types.Message):
    session = SessionLocal()
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    word_obj = session.query(Word).order_by(func.random()).first()
    if not word_obj:
        await message.answer("–ë–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞!")
        session.close()
        return

    text = (
        f"üá™üá™ S√µna: *{word_obj.word_et}*\n"
        f"üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: *{word_obj.translation}*\n\n"
        f"üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{word_obj.ai_generated_text}\n\n"
        f"üéß /say {word_obj.word_et}"
    )
    await message.answer(text, parse_mode="Markdown")
    session.close()

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_message_handler(help_handler, commands=["help"])
    dp.register_message_handler(say_handler, commands=["say"])
    dp.register_message_handler(random_word_handler, commands=["random_word"])
    # –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
