# bot/handlers.py
import logging
from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ForceReply
from sqlalchemy.sql import func
from datetime import datetime
from bot.database import SessionLocal, Word, UserSettings, UserWordStatus
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ —Å –Ω–∞–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
pending_typing_tests = {}

def mark_word_as_sent(session, chat_id: str, word_id: int):
    user_word = session.query(UserWordStatus).filter_by(chat_id=chat_id, word_id=word_id).first()
    if not user_word:
        user_word = UserWordStatus(chat_id=chat_id, word_id=word_id, sent_count=1, last_sent=datetime.now())
        session.add(user_word)
    else:
        user_word.sent_count += 1
        user_word.last_sent = datetime.now()
        session.add(user_word)

def get_word_message(word_obj):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
      ‚Äì "üéß –ü–æ—Å–ª—É—à–∞—Ç—å —Å–ª–æ–≤–æ" (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ)
      ‚Äì "–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–æ —á–∞—â–µ" –∏–ª–∏ "–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è" (—Å—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞)
      ‚Äì "–ú–µ–Ω—é" (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    """
    text = (
        f"üá™üá™ S√µna: <b>{word_obj.word_et}</b>\n"
        f"üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: <b>{word_obj.translation}</b>\n\n"
        f"üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{word_obj.ai_generated_text}\n"
    )
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üéß –ü–æ—Å–ª—É—à–∞—Ç—å —Å–ª–æ–≤–æ", callback_data=f"play:{word_obj.word_et}"))
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —á–∞—Å—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    if word_obj.repeat_more:
        repeat_text = "–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è"
    else:
        repeat_text = "–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–æ —á–∞—â–µ"
    keyboard.add(InlineKeyboardButton(repeat_text, callback_data=f"toggle_repeat:{word_obj.id}"))
    keyboard.add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu"))
    return text, keyboard

async def start_handler(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—ë –µ—â–µ –Ω–µ—Ç
    chat_id = str(message.chat.id)
    session = SessionLocal()
    user = session.query(UserSettings).filter_by(chat_id=chat_id).first()
    if not user:
        # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º defaults:
        # words_per_hour = 5, interval_minutes = 60, start_time = "09:00", end_time = "23:00"
        user = UserSettings(chat_id=chat_id, words_per_hour=5, interval_minutes=60, start_time="09:00", end_time="23:00")
        session.add(user)
        session.commit()
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    session.close()
    
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Å—Ç–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–∏ A1‚ÄìA2.\n"
        "–í –º–æ–µ–π –±–∞–∑–µ 1781 —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞—é—Ç —ç—Ç–∏ —É—Ä–æ–≤–Ω–∏.\n\n"
        "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "‚Ä¢ /startmailing ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–ª–æ–≤\n"
        "‚Ä¢ /random_word ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ /random_test ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç\n"
        "‚Ä¢ /progress ‚Äì –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤—ã—É—á–µ–Ω–æ X –∏–∑ Y)\n"
        "‚Ä¢ /settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "‚Ä¢ /help ‚Äì –ü–æ–º–æ—â—å\n"
        "‚Ä¢ /get5words ‚Äì –ü–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="startmailing"),
        InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word"),
        InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç", callback_data="random_test"),
        InlineKeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
        InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    )
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

async def startmailing_handler(message: types.Message):
    chat_id = str(message.chat.id)
    await send_five_words(chat_id, message.bot)

async def help_handler(message: types.Message):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äì –ó–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é\n"
        "/random_word ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/random_test ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç\n"
        "/progress ‚Äì –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "<code>/setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;</code> ‚Äì –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setsettings 5 60 09:00 23:00</code>\n"
        "/get5words ‚Äì –ü–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
        "/help ‚Äì –ü–æ–º–æ—â—å\n\n"
        "–î–ª—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: <a href='https://t.me/seoandrey1'>seoandrey1</a>"
    )
    await message.answer(help_text, parse_mode="HTML")

async def random_word_handler(message: types.Message):
    session = SessionLocal()
    word_obj = session.query(Word).order_by(func.random()).first()
    if not word_obj:
        await message.answer("–ë–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞!", parse_mode="HTML")
        session.close()
        return
    text, keyboard = get_word_message(word_obj)
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    mark_word_as_sent(session, str(message.chat.id), word_obj.id)
    session.commit()
    session.close()

async def random_test_handler(message: types.Message):
    session = SessionLocal()
    chat_id = str(message.chat.id)
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞: 1 - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π, 2 - –æ–±—Ä–∞—Ç–Ω—ã–π, 3 - —Ç–µ—Å—Ç —Å –Ω–∞–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞
    test_type = random.choice([1, 2, 3])
    
    if test_type == 3:
        # –¢–µ—Å—Ç —Å –Ω–∞–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞: –±–µ—Ä–µ–º —Å–ª–æ–≤–æ –∏–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_words = session.query(UserWordStatus).filter_by(chat_id=chat_id).all()
        if not user_words:
            test_type = random.choice([1, 2])  # fallback –Ω–∞ —Ç–∏–ø 1 –∏–ª–∏ 2
        else:
            chosen_status = random.choice(user_words)
            word_obj = session.query(Word).filter_by(id=chosen_status.word_id).first()
            if not word_obj:
                test_type = random.choice([1, 2])
    if test_type in [1, 2]:
        # –î–ª—è —Ç–∏–ø–æ–≤ 1 –∏ 2 –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≤—Å–µ–π –±–∞–∑—ã
        word_obj = session.query(Word).order_by(func.random()).first()
    
    if not word_obj:
        await message.answer("–ë–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞!", parse_mode="HTML")
        session.close()
        return

    # –¢–∏–ø 1: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç ‚Äì "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ <b>word_et</b>?"
    if test_type == 1:
        correct = word_obj.translation
        options = [correct]
        others = session.query(Word).filter(
            Word.part_of_speech == word_obj.part_of_speech,
            Word.id != word_obj.id
        ).order_by(func.random()).limit(3).all()
        if len(others) < 3:
            test_type = 3
        else:
            for w in others:
                options.append(w.translation)
            random.shuffle(options)
            correct_index = options.index(correct)
            keyboard = InlineKeyboardMarkup(row_width=2)
            for idx, option in enumerate(options):
                keyboard.add(InlineKeyboardButton(option, callback_data=f"test_answer:{word_obj.id}:{idx}:{correct_index}"))
            test_text = f"‚ùì –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ <b>{word_obj.word_et}</b>?"
            await message.answer(test_text, parse_mode="HTML", reply_markup=keyboard)
            mark_word_as_sent(session, chat_id, word_obj.id)
            session.commit()
            session.close()
            return

    if test_type == 2:
        # –¢–∏–ø 2: –û–±—Ä–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç ‚Äì "–ö–∞–∫ –ø–æ‚Äë—ç—Å—Ç–æ–Ω—Å–∫–∏ –±—É–¥–µ—Ç —Å–ª–æ–≤–æ <b>translation</b>?"
        correct = word_obj.word_et
        options = [correct]
        others = session.query(Word).filter(
            Word.part_of_speech == word_obj.part_of_speech,
            Word.id != word_obj.id
        ).order_by(func.random()).limit(3).all()
        if len(others) < 3:
            test_type = 3
        else:
            for w in others:
                options.append(w.word_et)
            random.shuffle(options)
            correct_index = options.index(correct)
            keyboard = InlineKeyboardMarkup(row_width=2)
            for idx, option in enumerate(options):
                keyboard.add(InlineKeyboardButton(option, callback_data=f"test_answer_rev:{word_obj.id}:{idx}:{correct_index}"))
            test_text = f"‚ùì –ö–∞–∫ –ø–æ‚Äë—ç—Å—Ç–æ–Ω—Å–∫–∏ –±—É–¥–µ—Ç —Å–ª–æ–≤–æ <b>{word_obj.translation}</b>?"
            await message.answer(test_text, parse_mode="HTML", reply_markup=keyboard)
            mark_word_as_sent(session, chat_id, word_obj.id)
            session.commit()
            session.close()
            return

    if test_type == 3:
        # –¢–µ—Å—Ç —Å –Ω–∞–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ ‚Äì "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ <b>word_et</b>:"
        test_text = f"‚ùì –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ <b>{word_obj.word_et}</b>:"
        await message.answer(test_text, parse_mode="HTML", reply_markup=ForceReply(selective=True))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
        pending_typing_tests[chat_id] = {
            'word_id': word_obj.id,
            'expected': word_obj.translation
        }
        mark_word_as_sent(session, chat_id, word_obj.id)
        session.commit()
        session.close()
        return

async def get_five_words_handler(message: types.Message):
    chat_id = str(message.chat.id)
    await send_five_words(chat_id, message.bot)

async def settings_handler(message: types.Message):
    chat_id = str(message.chat.id)
    session = SessionLocal()
    user = session.query(UserSettings).filter_by(chat_id=chat_id).first()
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user = UserSettings(chat_id=chat_id, words_per_hour=5, interval_minutes=60, start_time="09:00", end_time="23:00")
        session.add(user)
        session.commit()
        logger.info(f"–í /settings —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    else:
        logger.info(f"–í /settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: words_per_hour={user.words_per_hour}, interval_minutes={user.interval_minutes}, start_time={user.start_time}, end_time={user.end_time}")
    text = (
        f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"–°–ª–æ–≤ –≤ —á–∞—Å: <b>{user.words_per_hour}</b>\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: <b>{user.interval_minutes}</b> –º–∏–Ω—É—Ç\n"
        f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{user.start_time}</b>\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{user.end_time}</b>\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;</code>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setsettings 5 60 09:00 23:00</code>"
    )
    await message.answer(text, parse_mode="HTML")
    session.close()

async def set_settings_handler(message: types.Message):
    try:
        args = message.get_args().split()
        # –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç—Å—è 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: —Å–ª–æ–≤–∞_–≤_—á–∞—Å, –∏–Ω—Ç–µ—Ä–≤–∞–ª_–≤_–º–∏–Ω—É—Ç–∞—Ö, –Ω–∞—á–∞–ª–æ, –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        words_per_hour = int(args[0])
        interval_minutes = int(args[1])
        start_time = args[2]
        end_time = args[3]
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /setsettings")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;", parse_mode="HTML")
        return
    chat_id = str(message.chat.id)
    session = SessionLocal()
    user = session.query(UserSettings).filter_by(chat_id=chat_id).first()
    if not user:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        logger.info(f"–í /setsettings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äì —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.")
        user = UserSettings(chat_id=chat_id)
        session.add(user)
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: words_per_hour={words_per_hour}, interval_minutes={interval_minutes}, start_time={start_time}, end_time={end_time}")
    user.words_per_hour = words_per_hour
    user.interval_minutes = interval_minutes
    user.start_time = start_time
    user.end_time = end_time
    session.commit()
    session.close()
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", parse_mode="HTML")

async def progress_handler(message: types.Message):
    chat_id = str(message.chat.id)
    session = SessionLocal()
    total = session.query(Word).count()
    user_sent = session.query(UserWordStatus).filter_by(chat_id=chat_id).count()
    text = f"–ü—Ä–æ–≥—Ä–µ—Å—Å:\n–í—ã—É—á–µ–Ω–æ {user_sent} –∏–∑ {total} —Å–ª–æ–≤."
    await message.answer(text, parse_mode="HTML")
    session.close()

async def send_five_words(chat_id: str, bot: Bot):
    session = SessionLocal()
    sent_word_ids = [uw.word_id for uw in session.query(UserWordStatus).filter_by(chat_id=chat_id).all()]
    query = session.query(Word)
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞, –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è —á–∞—Å—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    frequent_words = session.query(Word).filter(Word.repeat_more == True).all()
    selected_words = []
    for word in frequent_words:
        user_word = session.query(UserWordStatus).filter_by(chat_id=chat_id, word_id=word.id).first()
        if user_word is None or (user_word.last_sent and (datetime.now() - user_word.last_sent).total_seconds() > 86400):
            selected_words.append(word)
    remaining = 5 - len(selected_words)
    if remaining > 0:
        if sent_word_ids:
            query = query.filter(~Word.id.in_(sent_word_ids))
        additional_words = query.order_by(func.random()).limit(remaining).all()
        selected_words.extend(additional_words)
        if not additional_words:
            # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            session.query(UserWordStatus).filter_by(chat_id=chat_id).delete()
            session.commit()
            additional_words = session.query(Word).order_by(func.random()).limit(remaining).all()
            selected_words.extend(additional_words)
    for word in selected_words:
        text, keyboard = get_word_message(word)
        await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard)
        mark_word_as_sent(session, chat_id, word.id)
    session.commit()
    session.close()

# --------------------- Inline Callback Query Handlers ---------------------

async def help_inline_handler(callback_query: types.CallbackQuery):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äì –ó–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é\n"
        "/random_word ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/random_test ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç\n"
        "/progress ‚Äì –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "<code>/setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;</code> ‚Äì –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setsettings 5 60 09:00 23:00</code>\n"
        "/get5words ‚Äì –ü–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
        "/help ‚Äì –ü–æ–º–æ—â—å\n\n"
        "–î–ª—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: <a href='https://t.me/seoandrey1'>seoandrey1</a>"
    )
    await callback_query.message.edit_text(help_text, parse_mode="HTML")
    await callback_query.answer()

async def settings_inline_handler(callback_query: types.CallbackQuery):
    settings_text = (
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/setsettings &lt;—Å–ª–æ–≤–∞ –≤ —á–∞—Å&gt; &lt;–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö&gt; &lt;–Ω–∞—á–∞–ª–æ&gt; &lt;–æ–∫–æ–Ω—á–∞–Ω–∏–µ&gt;</code>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/setsettings 5 60 09:00 23:00</code>"
    )
    await callback_query.message.edit_text(settings_text, parse_mode="HTML")
    await callback_query.answer()

async def menu_inline_handler(callback_query: types.CallbackQuery):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Å—Ç–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–∏ A1‚ÄìA2.\n"
        "–í –º–æ–µ–π –±–∞–∑–µ 1781 —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞—é—Ç —ç—Ç–∏ —É—Ä–æ–≤–Ω–∏.\n\n"
        "–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "‚Ä¢ /startmailing ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–ª–æ–≤\n"
        "‚Ä¢ /random_word ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ /random_test ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç\n"
        "‚Ä¢ /progress ‚Äì –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤—ã—É—á–µ–Ω–æ X –∏–∑ Y)\n"
        "‚Ä¢ /settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "‚Ä¢ /help ‚Äì –ü–æ–º–æ—â—å\n"
        "‚Ä¢ /get5words ‚Äì –ü–æ–ª—É—á–∏—Ç—å 5 —Å–ª–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="startmailing"),
        InlineKeyboardButton("–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word"),
        InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç", callback_data="random_test"),
        InlineKeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
        InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")
    )
    await callback_query.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback_query.answer()

async def inline_button_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    bot = callback_query.bot
    chat_id = str(callback_query.message.chat.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "toggle_repeat"
    if data.startswith("toggle_repeat:"):
        try:
            _, word_id = data.split(":", 1)
        except ValueError:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            return
        session = SessionLocal()
        word_obj = session.query(Word).filter_by(id=int(word_id)).first()
        if word_obj:
            word_obj.repeat_more = not word_obj.repeat_more
            session.commit()
            status = "–ø–æ–º–µ—á–µ–Ω–æ" if word_obj.repeat_more else "—É–±—Ä–∞–Ω–æ –∏–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è"
            await bot.send_message(chat_id, f"–°–ª–æ–≤–æ {word_obj.word_et} —Ç–µ–ø–µ—Ä—å {status}.", parse_mode="HTML")
        session.close()
        await callback_query.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç–∏–ø 1)
    if data.startswith("test_answer:"):
        parts = data.split(":")
        if len(parts) != 4:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞.")
            return
        _, word_id, selected_index, correct_index = parts
        if selected_index == correct_index:
            response = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            session = SessionLocal()
            word_obj = session.query(Word).filter_by(id=int(word_id)).first()
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {word_obj.translation if word_obj else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            session.close()
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç", callback_data="random_test"),
            InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")
        )
        await bot.send_message(chat_id, response, parse_mode="HTML", reply_markup=keyboard)
        await callback_query.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç–∏–ø 2 ‚Äì –æ–±—Ä–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç)
    if data.startswith("test_answer_rev:"):
        parts = data.split(":")
        if len(parts) != 4:
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞.")
            return
        _, word_id, selected_index, correct_index = parts
        session = SessionLocal()
        word_obj = session.query(Word).filter_by(id=int(word_id)).first()
        session.close()
        if selected_index == correct_index:
            response = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {word_obj.word_et if word_obj else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç", callback_data="random_test"),
            InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")
        )
        await bot.send_message(chat_id, response, parse_mode="HTML", reply_markup=keyboard)
        await callback_query.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "random_test" (–∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç")
    if data == "random_test":
        session = SessionLocal()
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞ —Å–ª—É—á–∞–π–Ω–æ –∏–∑ [1, 2]
        test_type = random.choice([1, 2])
        word_obj = session.query(Word).order_by(func.random()).first()
        if not word_obj:
            await bot.send_message(chat_id, "–ë–∞–∑–∞ —Å–ª–æ–≤ –ø—É—Å—Ç–∞!", parse_mode="HTML")
            session.close()
            await callback_query.answer()
            return
        if test_type == 1:
            correct = word_obj.translation
            options = [correct]
            others = session.query(Word).filter(
                Word.part_of_speech == word_obj.part_of_speech,
                Word.id != word_obj.id
            ).order_by(func.random()).limit(3).all()
            if len(others) < 3:
                await bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.", parse_mode="HTML")
                session.close()
                await callback_query.answer()
                return
            for w in others:
                options.append(w.translation)
            random.shuffle(options)
            correct_index = options.index(correct)
            keyboard = InlineKeyboardMarkup(row_width=2)
            for idx, option in enumerate(options):
                keyboard.add(InlineKeyboardButton(option, callback_data=f"test_answer:{word_obj.id}:{idx}:{correct_index}"))
            test_text = f"‚ùì –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ <b>{word_obj.word_et}</b>?"
            await bot.send_message(chat_id, test_text, parse_mode="HTML", reply_markup=keyboard)
        elif test_type == 2:
            correct = word_obj.word_et
            options = [correct]
            others = session.query(Word).filter(
                Word.part_of_speech == word_obj.part_of_speech,
                Word.id != word_obj.id
            ).order_by(func.random()).limit(3).all()
            if len(others) < 3:
                await bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.", parse_mode="HTML")
                session.close()
                await callback_query.answer()
                return
            for w in others:
                options.append(w.word_et)
            random.shuffle(options)
            correct_index = options.index(correct)
            keyboard = InlineKeyboardMarkup(row_width=2)
            for idx, option in enumerate(options):
                keyboard.add(InlineKeyboardButton(option, callback_data=f"test_answer_rev:{word_obj.id}:{idx}:{correct_index}"))
            test_text = f"‚ùì –ö–∞–∫ –ø–æ‚Äë—ç—Å—Ç–æ–Ω—Å–∫–∏ –±—É–¥–µ—Ç —Å–ª–æ–≤–æ <b>{word_obj.translation}</b>?"
            await bot.send_message(chat_id, test_text, parse_mode="HTML", reply_markup=keyboard)
        session.commit()
        session.close()
        await callback_query.answer("–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return

    if data == "startmailing":
        await send_five_words(chat_id, bot)
        await callback_query.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        return

    if data == "random_word":
        session = SessionLocal()
        word_obj = session.query(Word).order_by(func.random()).first()
        if word_obj:
            text, keyboard = get_word_message(word_obj)
            await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard)
            mark_word_as_sent(session, chat_id, word_obj.id)
        session.commit()
        session.close()
        await callback_query.answer("–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ!")
        return

    if data == "progress":
        session = SessionLocal()
        total = session.query(Word).count()
        user_sent = session.query(UserWordStatus).filter_by(chat_id=chat_id).count()
        text = f"–ü—Ä–æ–≥—Ä–µ—Å—Å:\n–í—ã—É—á–µ–Ω–æ {user_sent} –∏–∑ {total} —Å–ª–æ–≤."
        await bot.send_message(chat_id, text, parse_mode="HTML")
        session.close()
        await callback_query.answer()
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äì –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
    await callback_query.answer()

async def typing_test_answer_handler(message: types.Message):
    chat_id = str(message.chat.id)
    if chat_id not in pending_typing_tests:
        return  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    expected = pending_typing_tests[chat_id]['expected']
    word_id = pending_typing_tests[chat_id]['word_id']
    user_answer = message.text.strip().lower()
    if user_answer == expected.lower():
        response = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {expected}"
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç", callback_data="random_test"),
        InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")
    )
    await message.answer(response, parse_mode="HTML", reply_markup=keyboard)
    del pending_typing_tests[chat_id]

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_message_handler(startmailing_handler, commands=["startmailing"])
    dp.register_message_handler(help_handler, commands=["help"])
    dp.register_message_handler(random_word_handler, commands=["random_word"])
    dp.register_message_handler(random_test_handler, commands=["random_test"])
    dp.register_message_handler(get_five_words_handler, commands=["get5words"])
    dp.register_message_handler(settings_handler, commands=["settings"])
    dp.register_message_handler(set_settings_handler, commands=["setsettings"])
    dp.register_message_handler(progress_handler, commands=["progress"])
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º inline‚Äë–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "help", "settings" –∏ "menu"
    dp.register_callback_query_handler(help_inline_handler, lambda c: c.data == "help")
    dp.register_callback_query_handler(settings_inline_handler, lambda c: c.data == "settings")
    dp.register_callback_query_handler(menu_inline_handler, lambda c: c.data == "menu")
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö inline –∫–Ω–æ–ø–æ–∫ (–∫—Ä–æ–º–µ "play:")
    dp.register_callback_query_handler(
        inline_button_handler,
        lambda c: c.data is not None and not c.data.startswith("play:")
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handler –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç —Å –Ω–∞–±–æ—Ä–æ–º —Ç–µ–∫—Å—Ç–∞
    dp.register_message_handler(typing_test_answer_handler)
