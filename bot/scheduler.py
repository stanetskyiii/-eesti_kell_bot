import asyncio
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config.settings import START_HOUR, END_HOUR
from bot.database import SessionLocal, Word
from aiogram import Dispatcher
from sqlalchemy.sql import func

scheduler = AsyncIOScheduler()

async def send_new_words(dp: Dispatcher):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç,
    —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ —Å 9:00 –¥–æ 23:00 —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.
    """
    current_hour = datetime.now().hour
    if not (START_HOUR <= current_hour <= END_HOUR):
        return

    session = SessionLocal()
    # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (last_sent is null) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
    words = session.query(Word).filter(Word.last_sent == None).limit(5).all()
    if not words:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö
        words = session.query(Word).order_by(func.random()).limit(5).all()

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Å–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏.
    # –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã, –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ª–æ–≥–∏–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∞.
    for word in words:
        text = (
            f"üá™üá™ S√µna: *{word.word_et}*\n"
            f"üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: *{word.translation}*\n\n"
            f"üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{word.ai_generated_text}\n\n"
            f"üéß /say {word.word_et}"
        )
        # –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        # dp.bot.send_message(chat_id=..., text=text, parse_mode="Markdown")
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤–∞: {word.word_et}")  # –ó–∞–≥–ª—É—à–∫–∞
        word.last_sent = datetime.now()
        session.add(word)
    session.commit()
    session.close()

async def send_test_question(dp: Dispatcher):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–∞ (–≤—ã–∑–æ–≤ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞).
    """
    session = SessionLocal()
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
    word = session.query(Word).order_by(func.random()).first()
    if not word:
        session.close()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:
    # –í–∞—Ä–∏–∞–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ 3 —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ —Ç–æ–π –∂–µ —á–∞—Å—Ç–∏ —Ä–µ—á–∏.
    correct = word.translation
    options = [correct]
    other_words = session.query(Word).filter(
        Word.part_of_speech == word.part_of_speech,
        Word.id != word.id
    ).order_by(func.random()).limit(3).all()
    for w in other_words:
        options.append(w.translation)
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    import random
    random.shuffle(options)

    question_text = f"‚ùì –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ *\"{word.word_et}\"*?\n"
    for idx, option in enumerate(options, 1):
        question_text += f"{idx}Ô∏è‚É£ {option}\n"

    # –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    # –ü—Ä–∏–º–µ—Ä:
    # await dp.bot.send_message(chat_id=..., text=question_text, parse_mode="Markdown")
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", question_text)
    session.close()

def start_scheduler(dp):
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
    scheduler.add_job(send_new_words, 'interval', hours=1, args=[dp])
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    scheduler.add_job(send_test_question, 'interval', hours=2, args=[dp])
    scheduler.start()
